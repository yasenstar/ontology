Prefix(:=<http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(MyKN:=<http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN>

Declaration(Class(MyKN:Arcade))
Declaration(Class(MyKN:ArchiMate))
Declaration(Class(MyKN:AsciiDoctor_Diagrame))
Declaration(Class(MyKN:Automation_Testing_in_Python))
Declaration(Class(MyKN:Beautiful_Soup))
Declaration(Class(MyKN:Behave))
Declaration(Class(MyKN:Bottle))
Declaration(Class(MyKN:CherryPy))
Declaration(Class(MyKN:Chinese_PinYin_Converter))
Declaration(Class(MyKN:CubicWeb))
Declaration(Class(MyKN:Cypher))
Declaration(Class(MyKN:Dash))
Declaration(Class(MyKN:DataAnalytics))
Declaration(Class(MyKN:Dev_Language))
Declaration(Class(MyKN:Development))
Declaration(Class(MyKN:Diagram_as_Code))
Declaration(Class(MyKN:Diagraming))
Declaration(Class(MyKN:Diagrams))
Declaration(Class(MyKN:Django))
Declaration(Class(MyKN:EA_Tool))
Declaration(Class(MyKN:Enterprise_Architecture))
Declaration(Class(MyKN:Falcon))
Declaration(Class(MyKN:Flask))
Declaration(Class(MyKN:FreePlane))
Declaration(Class(MyKN:GNU_Octave))
Declaration(Class(MyKN:Game_Dev))
Declaration(Class(MyKN:Game_Development_in_Python))
Declaration(Class(MyKN:Graph))
Declaration(Class(MyKN:Graphviz))
Declaration(Class(MyKN:ImageMagick))
Declaration(Class(MyKN:Image_Processing_in_Python))
Declaration(Class(MyKN:Imaging))
Declaration(Class(MyKN:Institute))
Declaration(Class(MyKN:Ixml))
Declaration(Class(MyKN:Java))
Declaration(Class(MyKN:JavaScript))
Declaration(Class(MyKN:Julia))
Declaration(Class(MyKN:Keras))
Declaration(Class(MyKN:Lua))
Declaration(Class(MyKN:ML_in_Python))
Declaration(Class(MyKN:Mahotas))
Declaration(Class(MyKN:Matlab_OpenSource_Alternative))
Declaration(Class(MyKN:Matplotlib))
Declaration(Class(MyKN:MindMap))
Declaration(Class(MyKN:Natural_Language))
Declaration(Class(MyKN:Neo4j))
Declaration(Class(MyKN:NumPy))
Declaration(Class(MyKN:Numpy))
Declaration(Class(MyKN:Ontology))
Declaration(Class(MyKN:OpenCV))
Declaration(Class(MyKN:OpenSCAD))
Declaration(Class(MyKN:Paint.Net))
Declaration(Class(MyKN:Panda3D))
Declaration(Class(MyKN:Pandas))
Declaration(Class(MyKN:Pgmagick))
Declaration(Class(MyKN:PlantUML))
Declaration(Class(MyKN:PowerBI))
Declaration(Class(MyKN:Protege))
Declaration(Class(MyKN:PyGame))
Declaration(Class(MyKN:PyGlet))
Declaration(Class(MyKN:PyOpenGL))
Declaration(Class(MyKN:PyTorch))
Declaration(Class(MyKN:Pyramid))
Declaration(Class(MyKN:Pytest))
Declaration(Class(MyKN:Python))
Declaration(Class(MyKN:Pyunit))
Declaration(Class(MyKN:Query_Language))
Declaration(Class(MyKN:Requests))
Declaration(Class(MyKN:Roblox_Dev))
Declaration(Class(MyKN:Robot))
Declaration(Class(MyKN:SPARQL))
Declaration(Class(MyKN:Sage))
Declaration(Class(MyKN:Scikit-Image))
Declaration(Class(MyKN:Scikit-Learn))
Declaration(Class(MyKN:Scilab))
Declaration(Class(MyKN:Scipy))
Declaration(Class(MyKN:Scrapy))
Declaration(Class(MyKN:Seaborn))
Declaration(Class(MyKN:Selenium))
Declaration(Class(MyKN:Shape_in_Python))
Declaration(Class(MyKN:SimpleITK))
Declaration(Class(MyKN:Splinter))
Declaration(Class(MyKN:Structurizr_DSL))
Declaration(Class(MyKN:TOGAF))
Declaration(Class(MyKN:TensorFlow))
Declaration(Class(MyKN:Theano))
Declaration(Class(MyKN:Tools))
Declaration(Class(MyKN:TurboGears))
Declaration(Class(MyKN:Web2Py))
Declaration(Class(MyKN:WebSequenceDiagrams))
Declaration(Class(MyKN:Web_Dev_in_Python))
Declaration(Class(MyKN:Web_Scrapping_in_Python))
Declaration(Class(MyKN:Zachman))
Declaration(Class(MyKN:draw.io))
Declaration(Class(MyKN:picture2openscad))
Declaration(Class(<http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN#3D_Modeling>))
Declaration(ObjectProperty(MyKN:adopting))
Declaration(ObjectProperty(MyKN:supporting))
Declaration(ObjectProperty(MyKN:usedBy))
Declaration(DataProperty(MyKN:dateUseArchi))
Declaration(NamedIndividual(MyKN:AG2R_LA_MONDIALE))
Declaration(NamedIndividual(MyKN:Archi))
Declaration(NamedIndividual(MyKN:Aréas_Assurance))
Declaration(NamedIndividual(MyKN:AstraZeneca))
Declaration(NamedIndividual(MyKN:BKWI))
Declaration(NamedIndividual(MyKN:BOD_Banco_Universal))
Declaration(NamedIndividual(MyKN:CGI))
Declaration(NamedIndividual(MyKN:Canadian_province_of_New_Brunswick))
Declaration(NamedIndividual(MyKN:Cap_Gemini))
Declaration(NamedIndividual(MyKN:Casewise))
Declaration(NamedIndividual(MyKN:Ciber_International))
Declaration(NamedIndividual(MyKN:DXC_Technology))
Declaration(NamedIndividual(MyKN:Essential))
Declaration(NamedIndividual(MyKN:European_Commission))
Declaration(NamedIndividual(MyKN:GE_Corporate_Initiatives_Group))
Declaration(NamedIndividual(MyKN:GSK))
Declaration(NamedIndividual(MyKN:Government_of_Canada_-_Treasury_Board))
Declaration(NamedIndividual(MyKN:HOPEX))
Declaration(NamedIndividual(MyKN:Havenbedrijf_Rotterdam_N.V.))
Declaration(NamedIndividual(MyKN:IBM))
Declaration(NamedIndividual(MyKN:Jokosun))
Declaration(NamedIndividual(MyKN:KBC))
Declaration(NamedIndividual(MyKN:KPN))
Declaration(NamedIndividual(MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary))
Declaration(NamedIndividual(MyKN:Lafarge_Holcim))
Declaration(NamedIndividual(MyKN:LeanIX))
Declaration(NamedIndividual(MyKN:MassMutual))
Declaration(NamedIndividual(MyKN:Ministere_Des_Armees))
Declaration(NamedIndividual(MyKN:Nijmegen))
Declaration(NamedIndividual(MyKN:O-DA))
Declaration(NamedIndividual(MyKN:Ordnance_Survey))
Declaration(NamedIndividual(MyKN:PharmaPartners))
Declaration(NamedIndividual(MyKN:Philips_Lighting))
Declaration(NamedIndividual(MyKN:RSPCA))
Declaration(NamedIndividual(MyKN:Sogeti_Nederland_B.V.))
Declaration(NamedIndividual(MyKN:Sparx))
Declaration(NamedIndividual(MyKN:Standard_Bank_of_South_Africa_Limited))
Declaration(NamedIndividual(MyKN:Stime))
Declaration(NamedIndividual(MyKN:The_TriZetto_Group))
Declaration(NamedIndividual(MyKN:United_States_Department_of_Labor))
Declaration(NamedIndividual(MyKN:University_of_St_Gallen_HSG))
Declaration(NamedIndividual(MyKN:University_of_Sydney))
Declaration(NamedIndividual(MyKN:VFS))
Declaration(NamedIndividual(MyKN:Walraven))
Declaration(NamedIndividual(MyKN:iServer))

############################
#   Object Properties
############################

# Object Property: MyKN:adopting (MyKN:adopting)

InverseObjectProperties(MyKN:adopting MyKN:usedBy)
ObjectPropertyDomain(MyKN:adopting MyKN:Institute)
ObjectPropertyRange(MyKN:adopting MyKN:Tools)


############################
#   Data Properties
############################

# Data Property: MyKN:dateUseArchi (MyKN:dateUseArchi)

DataPropertyDomain(MyKN:dateUseArchi MyKN:Institute)
DataPropertyRange(MyKN:dateUseArchi xsd:dateTime)



############################
#   Classes
############################

# Class: MyKN:Arcade (MyKN:Arcade)

SubClassOf(MyKN:Arcade MyKN:Game_Development_in_Python)

# Class: MyKN:ArchiMate (MyKN:ArchiMate)

SubClassOf(MyKN:ArchiMate MyKN:TOGAF)

# Class: MyKN:AsciiDoctor_Diagrame (MyKN:AsciiDoctor_Diagrame)

SubClassOf(MyKN:AsciiDoctor_Diagrame MyKN:Diagram_as_Code)

# Class: MyKN:Automation_Testing_in_Python (MyKN:Automation_Testing_in_Python)

SubClassOf(MyKN:Automation_Testing_in_Python MyKN:Python)

# Class: MyKN:Beautiful_Soup (MyKN:Beautiful_Soup)

SubClassOf(MyKN:Beautiful_Soup MyKN:Web_Scrapping_in_Python)

# Class: MyKN:Behave (MyKN:Behave)

SubClassOf(MyKN:Behave MyKN:Automation_Testing_in_Python)

# Class: MyKN:Bottle (MyKN:Bottle)

SubClassOf(MyKN:Bottle MyKN:Web_Dev_in_Python)

# Class: MyKN:CherryPy (MyKN:CherryPy)

SubClassOf(MyKN:CherryPy MyKN:Web_Dev_in_Python)

# Class: MyKN:Chinese_PinYin_Converter (MyKN:Chinese_PinYin_Converter)

AnnotationAssertion(rdfs:comment MyKN:Chinese_PinYin_Converter "https://www.mdbg.net/chinese/webime-pinyin"^^xsd:anyURI)
SubClassOf(MyKN:Chinese_PinYin_Converter MyKN:Natural_Language)

# Class: MyKN:CubicWeb (MyKN:CubicWeb)

SubClassOf(MyKN:CubicWeb MyKN:Web_Dev_in_Python)

# Class: MyKN:Cypher (MyKN:Cypher)

SubClassOf(MyKN:Cypher MyKN:Query_Language)
SubClassOf(MyKN:Cypher ObjectSomeValuesFrom(MyKN:supporting MyKN:Neo4j))

# Class: MyKN:Dash (MyKN:Dash)

SubClassOf(MyKN:Dash MyKN:Web_Dev_in_Python)

# Class: MyKN:DataAnalytics (MyKN:DataAnalytics)

SubClassOf(MyKN:DataAnalytics MyKN:Tools)

# Class: MyKN:Dev_Language (MyKN:Dev_Language)

SubClassOf(MyKN:Dev_Language MyKN:Development)

# Class: MyKN:Diagram_as_Code (MyKN:Diagram_as_Code)

SubClassOf(MyKN:Diagram_as_Code MyKN:Diagraming)

# Class: MyKN:Diagraming (MyKN:Diagraming)

SubClassOf(MyKN:Diagraming MyKN:Tools)

# Class: MyKN:Diagrams (MyKN:Diagrams)

SubClassOf(MyKN:Diagrams MyKN:Diagram_as_Code)

# Class: MyKN:Django (MyKN:Django)

SubClassOf(MyKN:Django MyKN:Web_Dev_in_Python)

# Class: MyKN:EA_Tool (MyKN:EA_Tool)

SubClassOf(MyKN:EA_Tool MyKN:Tools)

# Class: MyKN:Falcon (MyKN:Falcon)

SubClassOf(MyKN:Falcon MyKN:Web_Dev_in_Python)

# Class: MyKN:Flask (MyKN:Flask)

SubClassOf(MyKN:Flask MyKN:Web_Dev_in_Python)

# Class: MyKN:FreePlane (MyKN:FreePlane)

AnnotationAssertion(rdfs:comment MyKN:FreePlane "https://www.freeplane.org/"^^xsd:anyURI)
SubClassOf(MyKN:FreePlane MyKN:MindMap)

# Class: MyKN:GNU_Octave (MyKN:GNU_Octave)

AnnotationAssertion(rdfs:comment MyKN:GNU_Octave "GNU Octave (https://www.gnu.org/software/octave/) may be the best-known alternative to MATLAB. In active development for almost three decades, Octave runs on Linux, Windows, and Mac—and is packaged for most major distributions. If you're looking for a project that is as close to the actual MATLAB language as possible, Octave may be a good fit for you; it strives for exact compatibility, so many of your projects developed for MATLAB may run in Octave with no modification necessary.

Octave has many different choices available for a front-end interaction outside of the default that now ships with version 4; some resemble MATLAB's interface more than others. Octave's Wikipedia page lists several options.

Octave is licensed under the GPL, and its source code can be found on the GNU download site (ftp://ftp.gnu.org/gnu/octave).")
SubClassOf(MyKN:GNU_Octave MyKN:Matlab_OpenSource_Alternative)

# Class: MyKN:Game_Dev (MyKN:Game_Dev)

SubClassOf(MyKN:Game_Dev MyKN:Development)

# Class: MyKN:Game_Development_in_Python (MyKN:Game_Development_in_Python)

SubClassOf(MyKN:Game_Development_in_Python MyKN:Python)

# Class: MyKN:Graph (MyKN:Graph)

SubClassOf(MyKN:Graph MyKN:Tools)

# Class: MyKN:Graphviz (MyKN:Graphviz)

SubClassOf(MyKN:Graphviz MyKN:Diagram_as_Code)

# Class: MyKN:ImageMagick (MyKN:ImageMagick)

AnnotationAssertion(rdfs:comment MyKN:ImageMagick "https://imagemagick.org/"^^xsd:anyURI)
SubClassOf(MyKN:ImageMagick MyKN:Imaging)

# Class: MyKN:Image_Processing_in_Python (MyKN:Image_Processing_in_Python)

SubClassOf(MyKN:Image_Processing_in_Python MyKN:Python)

# Class: MyKN:Imaging (MyKN:Imaging)

SubClassOf(MyKN:Imaging MyKN:Tools)

# Class: MyKN:Ixml (MyKN:Ixml)

SubClassOf(MyKN:Ixml MyKN:Web_Scrapping_in_Python)

# Class: MyKN:Java (MyKN:Java)

SubClassOf(MyKN:Java MyKN:Dev_Language)

# Class: MyKN:JavaScript (MyKN:JavaScript)

SubClassOf(MyKN:JavaScript MyKN:Dev_Language)

# Class: MyKN:Julia (MyKN:Julia)

AnnotationAssertion(rdfs:comment MyKN:Julia "Julia is a dynamically typed programming language featuring Lisp-style macros, built-in primitives for parallel computing, and functions designed for matrix manipulation, data visualization, and much more. It's designed to feel like a scripting language rather than a C-style programming-language and even has an interactive mode (REPL), and can be embedded into other languages through its embedding API.

Users of Julia have many reasons for loving its syntax and capabilities, but some of the popular examples include its broadcasting feature, which lets you apply a function to one or more arrays without a writing a complex loop, its simple array functions that let you rotate and reshape arrays, matrix transforms, autodiff, native Unicode support, integrated unit testing, easy paralellisation, and all-round simpler syntax with no loss of functionality (and improved code efficiency.)

Julia has an active community around its development and its use, so it's also been tailored for domain-specific purposes, including image processing (JuliaImages), biology (BioJulia), quantum physics (QuantumBFS), nonlinear dynamics (JuliaDynamics), economics (QuantEcon), astronomy (JuliaAstro) and more.

Julia is licensed under the MIT license, and can be downloaded from julialang.org."^^xsd:anyURI)
SubClassOf(MyKN:Julia MyKN:Matlab_OpenSource_Alternative)

# Class: MyKN:Keras (MyKN:Keras)

SubClassOf(MyKN:Keras MyKN:ML_in_Python)

# Class: MyKN:Lua (MyKN:Lua)

SubClassOf(MyKN:Lua MyKN:Dev_Language)
SubClassOf(MyKN:Lua ObjectSomeValuesFrom(MyKN:supporting MyKN:Roblox_Dev))

# Class: MyKN:ML_in_Python (MyKN:ML_in_Python)

SubClassOf(MyKN:ML_in_Python MyKN:Python)

# Class: MyKN:Mahotas (MyKN:Mahotas)

SubClassOf(MyKN:Mahotas MyKN:Image_Processing_in_Python)

# Class: MyKN:Matlab_OpenSource_Alternative (MyKN:Matlab_OpenSource_Alternative)

SubClassOf(MyKN:Matlab_OpenSource_Alternative MyKN:Tools)

# Class: MyKN:Matplotlib (MyKN:Matplotlib)

SubClassOf(MyKN:Matplotlib MyKN:ML_in_Python)

# Class: MyKN:MindMap (MyKN:MindMap)

SubClassOf(MyKN:MindMap MyKN:Tools)

# Class: MyKN:Natural_Language (MyKN:Natural_Language)

SubClassOf(MyKN:Natural_Language MyKN:Tools)

# Class: MyKN:Neo4j (MyKN:Neo4j)

SubClassOf(MyKN:Neo4j MyKN:Graph)

# Class: MyKN:NumPy (MyKN:NumPy)

AnnotationAssertion(rdfs:comment MyKN:NumPy "NumPy (http://www.numpy.org/) is the main package for scientific computing with Python (as its name suggests). It can process N-dimensional arrays, complex matrix transforms, linear algebra, Fourier transforms, and can act as a gateway for C and C++ integration. It's been used in the world of game and film visual effect development, and is the fundamental data-array structure for the SciPy Stack, an ecosystem of Python-based math, science, and engineering software. NumPy is licensed under the BSD license, and packages are available for Linux, Windows, and Mac OS X.")
SubClassOf(MyKN:NumPy MyKN:Matlab_OpenSource_Alternative)

# Class: MyKN:Numpy (MyKN:Numpy)

SubClassOf(MyKN:Numpy MyKN:ML_in_Python)

# Class: MyKN:Ontology (MyKN:Ontology)

SubClassOf(MyKN:Ontology MyKN:Tools)

# Class: MyKN:OpenCV (MyKN:OpenCV)

SubClassOf(MyKN:OpenCV MyKN:Image_Processing_in_Python)

# Class: MyKN:OpenSCAD (MyKN:OpenSCAD)

SubClassOf(MyKN:OpenSCAD <http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN#3D_Modeling>)

# Class: MyKN:Paint.Net (MyKN:Paint.Net)

AnnotationAssertion(rdfs:comment MyKN:Paint.Net "https://getpaint.net/"^^xsd:anyURI)
SubClassOf(MyKN:Paint.Net MyKN:Imaging)

# Class: MyKN:Panda3D (MyKN:Panda3D)

SubClassOf(MyKN:Panda3D MyKN:Game_Development_in_Python)

# Class: MyKN:Pandas (MyKN:Pandas)

SubClassOf(MyKN:Pandas MyKN:ML_in_Python)

# Class: MyKN:Pgmagick (MyKN:Pgmagick)

SubClassOf(MyKN:Pgmagick MyKN:Image_Processing_in_Python)

# Class: MyKN:PlantUML (MyKN:PlantUML)

SubClassOf(MyKN:PlantUML MyKN:Diagram_as_Code)

# Class: MyKN:PowerBI (MyKN:PowerBI)

SubClassOf(MyKN:PowerBI MyKN:DataAnalytics)

# Class: MyKN:Protege (MyKN:Protege)

SubClassOf(MyKN:Protege MyKN:Ontology)

# Class: MyKN:PyGame (MyKN:PyGame)

SubClassOf(MyKN:PyGame MyKN:Game_Development_in_Python)

# Class: MyKN:PyGlet (MyKN:PyGlet)

SubClassOf(MyKN:PyGlet MyKN:Game_Development_in_Python)

# Class: MyKN:PyOpenGL (MyKN:PyOpenGL)

SubClassOf(MyKN:PyOpenGL MyKN:Game_Development_in_Python)

# Class: MyKN:PyTorch (MyKN:PyTorch)

SubClassOf(MyKN:PyTorch MyKN:ML_in_Python)

# Class: MyKN:Pyramid (MyKN:Pyramid)

SubClassOf(MyKN:Pyramid MyKN:Web_Dev_in_Python)

# Class: MyKN:Pytest (MyKN:Pytest)

SubClassOf(MyKN:Pytest MyKN:Automation_Testing_in_Python)

# Class: MyKN:Python (MyKN:Python)

SubClassOf(MyKN:Python MyKN:Dev_Language)

# Class: MyKN:Pyunit (MyKN:Pyunit)

SubClassOf(MyKN:Pyunit MyKN:Automation_Testing_in_Python)

# Class: MyKN:Query_Language (MyKN:Query_Language)

SubClassOf(MyKN:Query_Language MyKN:Development)

# Class: MyKN:Requests (MyKN:Requests)

SubClassOf(MyKN:Requests MyKN:Web_Scrapping_in_Python)

# Class: MyKN:Roblox_Dev (MyKN:Roblox_Dev)

SubClassOf(MyKN:Roblox_Dev MyKN:Game_Dev)

# Class: MyKN:Robot (MyKN:Robot)

SubClassOf(MyKN:Robot MyKN:Automation_Testing_in_Python)

# Class: MyKN:SPARQL (MyKN:SPARQL)

SubClassOf(MyKN:SPARQL MyKN:Query_Language)
SubClassOf(MyKN:SPARQL ObjectSomeValuesFrom(MyKN:supporting MyKN:Protege))

# Class: MyKN:Sage (MyKN:Sage)

AnnotationAssertion(rdfs:comment MyKN:Sage "SageMath (http://www.sagemath.org/index.html) is another open source mathematics software system that might be a good option for those seeking a MATLAB alternative. It's built on top of a variety of well-known Python-based scientific computing libraries, and its own language is syntactically similar to Python. It has many features including a command-line interface, browser-based notebooks, tools for embedding formulas in other documents, and of course, many mathematical libraries.

SageMath is available under a GPL license, and its source code can be found on the project website (http://www.sagemath.org/download-source.html).")
SubClassOf(MyKN:Sage MyKN:Matlab_OpenSource_Alternative)

# Class: MyKN:Scikit-Image (MyKN:Scikit-Image)

SubClassOf(MyKN:Scikit-Image MyKN:Image_Processing_in_Python)

# Class: MyKN:Scikit-Learn (MyKN:Scikit-Learn)

SubClassOf(MyKN:Scikit-Learn MyKN:ML_in_Python)

# Class: MyKN:Scilab (MyKN:Scilab)

AnnotationAssertion(rdfs:comment MyKN:Scilab "Scilab (http://www.scilab.org/) is another open source option for numerical computing that runs across all the major platforms: Windows, Mac, and Linux included. Scilab is perhaps the best known alternative outside of Octave, and (like Octave) it is very similar to MATLAB in its implementation, although exact compatibility is not a goal of the project's developers.

Scilab is distributed as open source under the GPL-compatible CeCILL license, and its source code (http://www.scilab.org/development/sources/stable) is available on the project website.")
SubClassOf(MyKN:Scilab MyKN:Matlab_OpenSource_Alternative)

# Class: MyKN:Scipy (MyKN:Scipy)

SubClassOf(MyKN:Scipy MyKN:ML_in_Python)

# Class: MyKN:Scrapy (MyKN:Scrapy)

SubClassOf(MyKN:Scrapy MyKN:Web_Scrapping_in_Python)

# Class: MyKN:Seaborn (MyKN:Seaborn)

SubClassOf(MyKN:Seaborn MyKN:ML_in_Python)

# Class: MyKN:Selenium (MyKN:Selenium)

SubClassOf(MyKN:Selenium MyKN:Web_Scrapping_in_Python)

# Class: MyKN:Shape_in_Python (MyKN:Shape_in_Python)

AnnotationAssertion(rdfs:comment MyKN:Shape_in_Python "Documentation: https://compmec-shape.readthedocs.io/en/latest/rst/get_started.html"^^xsd:anyURI)
AnnotationAssertion(rdfs:comment MyKN:Shape_in_Python "Github: https://github.com/compmec/shape"^^xsd:anyURI)
SubClassOf(MyKN:Shape_in_Python MyKN:Python)

# Class: MyKN:SimpleITK (MyKN:SimpleITK)

SubClassOf(MyKN:SimpleITK MyKN:Image_Processing_in_Python)

# Class: MyKN:Splinter (MyKN:Splinter)

SubClassOf(MyKN:Splinter MyKN:Automation_Testing_in_Python)

# Class: MyKN:Structurizr_DSL (MyKN:Structurizr_DSL)

SubClassOf(MyKN:Structurizr_DSL MyKN:Diagram_as_Code)

# Class: MyKN:TOGAF (MyKN:TOGAF)

SubClassOf(MyKN:TOGAF MyKN:Enterprise_Architecture)

# Class: MyKN:TensorFlow (MyKN:TensorFlow)

SubClassOf(MyKN:TensorFlow MyKN:ML_in_Python)

# Class: MyKN:Theano (MyKN:Theano)

SubClassOf(MyKN:Theano MyKN:ML_in_Python)

# Class: MyKN:TurboGears (MyKN:TurboGears)

SubClassOf(MyKN:TurboGears MyKN:Web_Dev_in_Python)

# Class: MyKN:Web2Py (MyKN:Web2Py)

SubClassOf(MyKN:Web2Py MyKN:Web_Dev_in_Python)

# Class: MyKN:WebSequenceDiagrams (MyKN:WebSequenceDiagrams)

SubClassOf(MyKN:WebSequenceDiagrams MyKN:Diagram_as_Code)

# Class: MyKN:Web_Dev_in_Python (MyKN:Web_Dev_in_Python)

SubClassOf(MyKN:Web_Dev_in_Python MyKN:Python)

# Class: MyKN:Web_Scrapping_in_Python (MyKN:Web_Scrapping_in_Python)

SubClassOf(MyKN:Web_Scrapping_in_Python MyKN:Python)

# Class: MyKN:Zachman (MyKN:Zachman)

SubClassOf(MyKN:Zachman MyKN:Enterprise_Architecture)

# Class: MyKN:draw.io (MyKN:draw.io)

AnnotationAssertion(rdfs:comment MyKN:draw.io "https://app.diagrams.net/"^^xsd:anyURI)
SubClassOf(MyKN:draw.io MyKN:Diagraming)

# Class: MyKN:picture2openscad (MyKN:picture2openscad)

AnnotationAssertion(rdfs:comment MyKN:picture2openscad "Created by Jerry Jia")
AnnotationAssertion(rdfs:comment MyKN:picture2openscad "https://github.com/JerryJiaGit/picture2openscad.py"^^xsd:anyURI)
SubClassOf(MyKN:picture2openscad MyKN:OpenSCAD)

# Class: <http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN#3D_Modeling> (<http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN#3D_Modeling>)

SubClassOf(<http://www.semanticweb.org/v0cn037/ontologies/2023/9/MyKN#3D_Modeling> MyKN:Tools)


############################
#   Named Individuals
############################

# Individual: MyKN:AG2R_LA_MONDIALE (MyKN:AG2R_LA_MONDIALE)

AnnotationAssertion(rdfs:comment MyKN:AG2R_LA_MONDIALE "Joel01 (2023-10-19):
Hi,
As an Architect for the french AG2R LA MONDIALE firm:
Archi is used to document the global IS/IT Landscape, from an infrastructure, application and business point of view.
We use it for impact analysis (together with information shared in a CMDB based on MEGA - maybe in the future we'll use full archi...) and as a basis for each architecture change (ie. for project related solution architecture) where deliverables are created through the buitin jasperreport engine (whith a customized report we should soon share with the community).
Joël")
AnnotationAssertion(rdfs:comment MyKN:AG2R_LA_MONDIALE "https://www.ag2rlamondiale.fr/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:AG2R_LA_MONDIALE)
ObjectPropertyAssertion(MyKN:adopting MyKN:AG2R_LA_MONDIALE MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:AG2R_LA_MONDIALE "2021-10-10T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Archi (Archi)

AnnotationAssertion(rdfs:label MyKN:Archi "Archi")
ClassAssertion(MyKN:Diagraming MyKN:Archi)
ClassAssertion(MyKN:EA_Tool MyKN:Archi)
ObjectPropertyAssertion(MyKN:usedBy MyKN:Archi MyKN:KPN)
ObjectPropertyAssertion(MyKN:usedBy MyKN:Archi MyKN:VFS)

# Individual: MyKN:Aréas_Assurance (MyKN:Aréas_Assurance)

AnnotationAssertion(rdfs:comment MyKN:Aréas_Assurance "romuald (2023/09/18):
As the only EA in my company (Aréas Assurance, French Insurance), I chose to Archimate for the Architecture Description of the company from Capacities to server...")
AnnotationAssertion(rdfs:comment MyKN:Aréas_Assurance "https://www.areas.fr/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Aréas_Assurance)
ObjectPropertyAssertion(MyKN:adopting MyKN:Aréas_Assurance MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Aréas_Assurance "2023-09-18T00:00:00"^^xsd:dateTime)

# Individual: MyKN:AstraZeneca (MyKN:AstraZeneca)

AnnotationAssertion(rdfs:comment MyKN:AstraZeneca "2023/08/21: danisman
Myself and the Head of Architecture used it for a large UK Ministry of Defence project we were delivering from 2020 to 2022 (when I left Sopra Steria) .. I then moved the model to BiZZdesign .. but boy oh boy, was that GUI and UX a hot mess. Would rather have stayed on Archi but the client wanted it.  :-[   Beugh.
I now use Archi in AstraZeneca and am an ambassador there .. fighting off BiZZdesign, Lean.IX and (guess what) Microsoft Access. We will move to a SaaS platform one day I'm sure, but Archi gets us value very very quickly.")
AnnotationAssertion(rdfs:comment MyKN:AstraZeneca "https://www.astrazeneca.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:AstraZeneca)
ObjectPropertyAssertion(MyKN:adopting MyKN:AstraZeneca MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:AstraZeneca "2023-08-21T00:00:00"^^xsd:dateTime)

# Individual: MyKN:BKWI (MyKN:BKWI)

AnnotationAssertion(rdfs:comment MyKN:BKWI "tgurts (2017-10-30):
I am currently working as a solution and project architect at BKWI, a Dutch government organization at the domain of Work and Income. We are using Archi

to model reference architecture
to describe architectural and orgnizational principles
to descibe the architecture of our application landscape
to model project architectures

Ton Geurts")
AnnotationAssertion(rdfs:comment MyKN:BKWI "https://www.bkwi.nl/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:BKWI)
ObjectPropertyAssertion(MyKN:adopting MyKN:BKWI MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:BKWI "2017-10-30T00:00:00"^^xsd:dateTime)

# Individual: MyKN:BOD_Banco_Universal (MyKN:BOD_Banco_Universal)

AnnotationAssertion(rdfs:comment MyKN:BOD_Banco_Universal "jose_agc@msn.com Jose Alfredo Guillen (2018-04-18):
Dear Archi Forum,

I work for a Bank in Venezuela, we have evaluated commercial software/tools to facilitate the incorporation of the practice of EA in the company.

The conclusion: There are very good tools, however, the implementation process is complex because they are more oriented to the tool than to the value that the practice of architecture can provide within the industry where it is or is intended to be implemented. Their licensing and implementation costs are very high and usually do not end up convincing the sponsors about the return on investment.

My recommendation: The focus of the architecture practice should be on the value it generates within the industry where it will be applied. Going to have a well governed repository, which allows to respond things of value to the business easily and within the reach of those interested. So that it allows them to advance to a new business result.

We evaluated Archi vs. The Essential Project and my recommendation was Archi, among the reasons is the noise generated by adding ontological themes to modeling. Being that our framework is based on TOGAF and this speaks in terms of Archimate. My recommendation was Archi.

What would we like to be incorporated in Archi?
Multi-user and collaborative facility. Which is in progress.
Extend the tool so that it covers the entire TOGAF architecture repository structure and the artifacts link to the model.
Incorporate a graph database to facilitate impact analysis at a greater depth level.

In my case we are doing a work to define/create the meta architecture (Phase A) that will start by modeling BIAN Landscape v6.0 (Phase A, B and C), Hybrid Cloud and dockerization (Phase D), DevOps (We are working on how).

Best regards,
José Alfredo Guillén
https://www.linkedin.com/in/jose-guillen-12160085")
AnnotationAssertion(rdfs:comment MyKN:BOD_Banco_Universal "https://www.linkedin.com/company/bod-banco-universal/about/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:BOD_Banco_Universal)
ObjectPropertyAssertion(MyKN:adopting MyKN:BOD_Banco_Universal MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:BOD_Banco_Universal "2018-04-18T00:00:00"^^xsd:dateTime)

# Individual: MyKN:CGI (MyKN:CGI)

AnnotationAssertion(rdfs:comment MyKN:CGI "danisman (2023/08/21):
When I was in CGI, I used to use Archi all the time, before being forced into some other monstrosity!")
AnnotationAssertion(rdfs:comment MyKN:CGI "sianvanes (2023/03/15):
At CGI we have a number of tools, Archi and Sparx are the tools most commonly used for architecture with a few clients opting to go for BiZZdesign etc.
My preference, and often a client preference is Archi because it is aesthetically more pleasing to the eye, easier to read and navigate.
Personally, I opted to be a Patron because it's only fair to support your work. I've been really pleased with the tools for publishing in different formats, to make it easier for non-architects to read documentation.")
AnnotationAssertion(rdfs:comment MyKN:CGI "https://www.cgi.com/en"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:CGI)
ObjectPropertyAssertion(MyKN:adopting MyKN:CGI MyKN:Archi)
ObjectPropertyAssertion(MyKN:adopting MyKN:CGI MyKN:Sparx)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:CGI "2023-03-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Canadian_province_of_New_Brunswick (MyKN:Canadian_province_of_New_Brunswick)

AnnotationAssertion(rdfs:comment MyKN:Canadian_province_of_New_Brunswick "prgee (2016-05-12):
Archi Supports the Government of New Brunswick’s EA Program
As a consultant working with the Office of the CIO in the Canadian province of New Brunswick, I introduced
ArchiMate as the recommended modeling notation for developing a Business Architecture framework. Since they
had no \"official\" tool in place I also introduced them to Archi (http://www.archimatetool.com, an open source
implementation of ArchiMate) as a means to learn the language and start on the development of some Business
Architecture models. Archi is very easy to install and much quicker to learn than most of the commercial tools
(e.g. Sparx EA) I have worked with. It also had \"just enough\" functionality to support our modelling needs at the
time. Archi's CSV import/export functionality allowed us to quickly import model content from external sources as
well as utilize an export-update-import approach to manage bulk updates to the model. Its support for the Open
Group’s ArchiMate Model Exchange File format further guarantees the portability of model files and mitigates the
risk of vendor lock-in. Its sole limitation is that it does not support external image files in a diagram.
The key deliverables for the project included a Business Capability Map which was developed as a hierarchical,
nested diagram based on a set of ArchiMate \"business function\" elements. Since ArchiMate 2.1 does not include
a \"capability\" element, we followed the prevailing practise of using the \"business function\" element for this
purpose. We also used the Jasper Reports module included with Archi to generate a supporting Business
Capability Reference document which contained the capability descriptions, as well as other supporting
information.
New Brunswick is officially bilingual (English/French) so we were required to publish these deliverables in both
official languages. Please refer to the following links to view the resulting deliverables – the Business Capability
Map and Reference Model are accessible via the “Quick Links” section on each page:
www.gnb.ca/OCIO
 English Capability Map
 English Capability Reference
www.gnb.ca/BCSI
 French Capability Map
 French Capability Reference

Note: The following techniques were used to produce these artifacts.
 Capability Map was created as an ArchiMate view and then the diagram was exported as a PDF file.
 Pages that include graphics were created using blank Business Canvas pages.
 The Provincial logo was added to the PDF using the open-source Inkscape graphics editor
(https://inkscape.org).
 The Reference document was 100% generated from Archi using a customized set of Jasper control files.
 The Jasper report was generated in MS Word format in order to fine tune page breaks and add headers
and footers.
 User-defined properties for \"French:name\" and \"French:documentation\".were added to the French versions.
 The model was exported to CSV files, using some Excel tricks to swap the French and English values, and
re-imported to Archi before repeating the above steps.")
AnnotationAssertion(rdfs:comment MyKN:Canadian_province_of_New_Brunswick "https://www.archimatetool.com/blog/2016/05/16/archi-spotlight-archi-supports-the-government-of-new-brunswicks-ea-program/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Canadian_province_of_New_Brunswick)
ObjectPropertyAssertion(MyKN:adopting MyKN:Canadian_province_of_New_Brunswick MyKN:Archi)

# Individual: MyKN:Cap_Gemini (MyKN:Cap_Gemini)

ClassAssertion(MyKN:Institute MyKN:Cap_Gemini)
ObjectPropertyAssertion(MyKN:adopting MyKN:Cap_Gemini MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Cap_Gemini "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Casewise (MyKN:Casewise)

ClassAssertion(MyKN:Institute MyKN:Casewise)
ObjectPropertyAssertion(MyKN:adopting MyKN:Casewise MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Casewise "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Ciber_International (MyKN:Ciber_International)

AnnotationAssertion(rdfs:comment MyKN:Ciber_International "Johan2 (2016-03-25):
As Enterprise Architect for Ciber International:
* Started with Archi to create a multidimensional model, with lots of views on different architecture subdomains, like Business, Application, Technology etc.
* Also other architects work with Archi.

As Enterprise Architect for BDO International:
* Started with Archi to create amultidimensional model, with lots of views on different architecture subdomains, like Business, Application, Technology etc.

Ciber Global is now HTC Global Services with effect from November 30, 2021. This account will close soon.")
AnnotationAssertion(rdfs:comment MyKN:Ciber_International "https://www.htcinc.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Ciber_International)
ObjectPropertyAssertion(MyKN:adopting MyKN:Ciber_International MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Ciber_International "2016-03-25T00:00:00"^^xsd:dateTime)

# Individual: MyKN:DXC_Technology (MyKN:DXC_Technology)

AnnotationAssertion(rdfs:comment MyKN:DXC_Technology "Pino (2017-11-28):
Hi all,

Here in DXC Technology (https://www.dxc.technology/) Archi is quite a common tool among architects. Sure, being DXC a TOGAF Platinum Member might be one of the reasons, but with or without the company decision to be a Platinum member, Archi is a great tool that allowed me to deliver real life architectures for multiple projects. Can Archi be improved? Sure it can, but as it stands is already quite up to its task.

Pino")
AnnotationAssertion(rdfs:comment MyKN:DXC_Technology "https://dxc.com/us/en"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:DXC_Technology)
ObjectPropertyAssertion(MyKN:adopting MyKN:DXC_Technology MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:DXC_Technology "2017-08-08T00:00:00"^^xsd:dateTime)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:DXC_Technology "2017-11-28T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Essential (MyKN:Essential)

ClassAssertion(MyKN:EA_Tool MyKN:Essential)
ObjectPropertyAssertion(MyKN:usedBy MyKN:Essential MyKN:VFS)

# Individual: MyKN:European_Commission (MyKN:European_Commission)

AnnotationAssertion(rdfs:comment MyKN:European_Commission "Jean-Baptiste Sarrodie (2016-03-24):
Another known usage is the official documentation of the European Interoperability Reference Architecture.

This is made clear by:

The reference to Archi at the end of the official page
The publication of the HTML export of the beta version of the reference architecture

The EIRA uses (and extends) the ArchiMate language as a modelling notation and uses service orientation as an architectural style.")
AnnotationAssertion(rdfs:comment MyKN:European_Commission "https://joinup.ec.europa.eu/collection/european-interoperability-reference-architecture-eira/solution/eira"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:European_Commission)

# Individual: MyKN:GE_Corporate_Initiatives_Group (MyKN:GE_Corporate_Initiatives_Group)

ClassAssertion(MyKN:Institute MyKN:GE_Corporate_Initiatives_Group)
ObjectPropertyAssertion(MyKN:adopting MyKN:GE_Corporate_Initiatives_Group MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:GE_Corporate_Initiatives_Group "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:GSK (MyKN:GSK)

AnnotationAssertion(rdfs:comment MyKN:GSK "nair (2022-09-05):
I used Archi at GSK. I was engaged at GSK as a consultant. I noticed that GSK has Archi available for anyone to install through their internal Software Center.")
AnnotationAssertion(rdfs:comment MyKN:GSK "https://www.gsk.com"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:GSK)
ObjectPropertyAssertion(MyKN:adopting MyKN:GSK MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:GSK "2022-09-05T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Government_of_Canada_-_Treasury_Board (MyKN:Government_of_Canada_-_Treasury_Board)

ClassAssertion(MyKN:Institute MyKN:Government_of_Canada_-_Treasury_Board)
ObjectPropertyAssertion(MyKN:adopting MyKN:Government_of_Canada_-_Treasury_Board MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Government_of_Canada_-_Treasury_Board "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:HOPEX (MyKN:HOPEX)

ClassAssertion(MyKN:EA_Tool MyKN:HOPEX)

# Individual: MyKN:Havenbedrijf_Rotterdam_N.V. (MyKN:Havenbedrijf_Rotterdam_N.V.)

ClassAssertion(MyKN:Institute MyKN:Havenbedrijf_Rotterdam_N.V.)
ObjectPropertyAssertion(MyKN:adopting MyKN:Havenbedrijf_Rotterdam_N.V. MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Havenbedrijf_Rotterdam_N.V. "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:IBM (MyKN:IBM)

AnnotationAssertion(rdfs:comment MyKN:IBM "FJL (2016-04-15):
Another example: IBM

http://www.ibm.com/developerworks/cloud/library/cl-cloudecosystem/

regards,

F.")
AnnotationAssertion(rdfs:comment MyKN:IBM "https://developer.ibm.com/depmodels/cloud/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:IBM)
ObjectPropertyAssertion(MyKN:adopting MyKN:IBM MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:IBM "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Jokosun (MyKN:Jokosun)

AnnotationAssertion(rdfs:comment MyKN:Jokosun "tpedot (2023-12-03):
Hello the Archicommunity,
I just joined Jokosun company, startup company for deploying energy solutions in west Africa, as a CTO/CIO last September and will use with Archi to construct the first EA model.

It will be used to discuss with CEO, represent actual architecture and defining the strategy.
I am an experienced user of Python and DevOps oriented I will push for automation wherever I can.

I am also see open source as a corner stone of our strategy and for that I consider contributing to Archi.

Happy to join this community."^^rdf:langString)
AnnotationAssertion(rdfs:comment MyKN:Jokosun "https://www.jokosun.solutions/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Jokosun)
ObjectPropertyAssertion(MyKN:adopting MyKN:Jokosun MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Jokosun "2023-12-03T00:00:00"^^xsd:dateTime)

# Individual: MyKN:KBC (MyKN:KBC)

AnnotationAssertion(rdfs:comment MyKN:KBC "Luc Gadeyne (2017-08-08):
I am working as an Enterprise/Solution Architect @KBC Belgium.
Together with a number of colleagues I am introducing Archimate 3.0 in IT.
We use Archi as a tool to support modeling.
We combine this with Grafico and GIT (or SVN-Subversion) to enable collaboration.")
AnnotationAssertion(rdfs:comment MyKN:KBC "https://www.kbc.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:KBC)
ObjectPropertyAssertion(MyKN:adopting MyKN:KBC MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:KBC "2017-08-08T00:00:00"^^xsd:dateTime)

# Individual: MyKN:KPN (MyKN:KPN)

AnnotationAssertion(rdfs:comment MyKN:KPN "wiebow (2023-10-18):
Hi,

I work as an architect for KPN (Dutch Telecom and Network company) and we use Archimate and Archi.
I've moved to a new team recently and we are introducing Archimate as a way to get more architects and consultants involved. We do this using the collaboration plug-in and so far it has been lots of fun and value is already starting to show.  I am proud to contribute a small amount of euros each month to support this fantastic toolset.

Regards,
Wiebo")
AnnotationAssertion(rdfs:comment MyKN:KPN "https://www.kpn.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:KPN)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:KPN "2021-10-18T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary (MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary)

AnnotationAssertion(rdfs:comment MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary "mdvadim (2017-05-10):
Kemerovo Heart Disease Hospital and Dispensary.

As CQO and my team we are trying to describe the architecture of our institute using world-famous languages ​​like Archi and methods, realizing that, perhaps, among our Russian colleagues we will not understand.

New language - new opportunities for communication.")
AnnotationAssertion(rdfs:comment MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary "https://eng.kemcardio.ru/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary)
ObjectPropertyAssertion(MyKN:adopting MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Kemerovo_Heart_Disease_Hospital_and_Dispensary "2017-05-10T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Lafarge_Holcim (MyKN:Lafarge_Holcim)

AnnotationAssertion(rdfs:comment MyKN:Lafarge_Holcim "Jean-Baptiste Sarrodie (2016-03-24):
As former Architect for the french LafargeHolcim division:
Archi is used to document the global IS/IT Landscape, mainly from an infrastructure and application point of view. This is used for impact analysis (together with information shared in a CMDB based on CMDBuild) and as a basis for each architecture change (ie. for project related solution architecture) where deliverables are created through the buitin jasperreport engine (customizable report).

As Enterprise Architect Consultant for Arismore:
Archi is used:

to document architectures for our customers when they have no EA tooling in place,
to document architectures for our own, internal, projet,
by trainees during official ArchiMate trainings

Regards,

JB")
AnnotationAssertion(rdfs:comment MyKN:Lafarge_Holcim "https://www.holcim.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Lafarge_Holcim)
ObjectPropertyAssertion(MyKN:adopting MyKN:Lafarge_Holcim MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Lafarge_Holcim "2016-03-24T00:00:00"^^xsd:dateTime)

# Individual: MyKN:LeanIX (MyKN:LeanIX)

ClassAssertion(MyKN:EA_Tool MyKN:LeanIX)

# Individual: MyKN:MassMutual (MyKN:MassMutual)

AnnotationAssertion(rdfs:comment MyKN:MassMutual "kkosienski (Kevin) (2020-11-04):
Hi,

I am part of an enterprise architecture group at a large financial services company (MassMutual) and we use Archi across our entire federated architecture community.  We use it to produce various viewpoints supporting enterprise architecture planning, strategy, and solutions delivery. We have implemented a standard \"EA\" model which we manage change in Github using Co-archi plugin functionality.  We have integrated it with our EAMS and import content from the EAMS into the model in order to make it available to use in our views.

-Kevin")
AnnotationAssertion(rdfs:comment MyKN:MassMutual "https://www.massmutual.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:MassMutual)
ObjectPropertyAssertion(MyKN:adopting MyKN:MassMutual MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:MassMutual "2020-11-04T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Ministere_Des_Armees (MyKN:Ministere_Des_Armees)

AnnotationAssertion(rdfs:comment MyKN:Ministere_Des_Armees "Jean Christophe (2023/06/09):
I'm currently working with the french ministry of defence as an enterprise architect.
The use of Archi is promoted in the IT department of the ministry.
I discovered Archi a few month ago and I find this tool very simple and intuitive")
AnnotationAssertion(rdfs:comment MyKN:Ministere_Des_Armees "https://www.defense.gouv.fr/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Ministere_Des_Armees)
ObjectPropertyAssertion(MyKN:adopting MyKN:Ministere_Des_Armees MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Ministere_Des_Armees "2023-06-09T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Nijmegen (MyKN:Nijmegen)

AnnotationAssertion(rdfs:comment MyKN:Nijmegen "AdGerrits (2018-05-08):
Although we have been working with Archi for some time within the municipality of Nijmegen (the Netherlands), it is from today the standard architecture-tool that we use. The lack of collaboration functionality used to be a showstopper, but it is now present in sufficient quantities and hopefully will be even better in the future. I really think that Archi is in many cases more usable than other closed and expensive applications. Go go Archi!")
AnnotationAssertion(rdfs:comment MyKN:Nijmegen "https://en.intonijmegen.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Nijmegen)
ObjectPropertyAssertion(MyKN:adopting MyKN:Nijmegen MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Nijmegen "2018-05-08T00:00:00"^^xsd:dateTime)

# Individual: MyKN:O-DA (MyKN:O-DA)

AnnotationAssertion(rdfs:comment MyKN:O-DA "majiro (2023-07-26):
Hi,

I am a member of an ongoing project to define next version of O-DA.
# O-DA: https://www.opengroup.org/open-group-releases-dependability-through-assuredness-%E2%84%A2-standard

Archimate is set as language for enterprise architecture design in the new standard and of course Archi is de facto.
I am in charge of some Archi extention for O-DA.

BR
Jiro")
ClassAssertion(MyKN:Institute MyKN:O-DA)
ObjectPropertyAssertion(MyKN:adopting MyKN:O-DA MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:O-DA "2021-07-26T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Ordnance_Survey (MyKN:Ordnance_Survey)

AnnotationAssertion(rdfs:comment MyKN:Ordnance_Survey "Jacqui (2023-12-20):
I wanted to add Ordnance Survey to the list of organisations using Archi.
As a Solution Architect I have been using Archi to model the part of the business I am working in, and a few others have been doing the same. It is so much easier to use than Sparx, which I just don't have the time to learn to use!

Recently I have been creating data models in Archi, which ArchiMate isn't that good for, but it is better than nothing.

I love that I can publish to HTML and my coworkers can then access views and the model easily (we push to a git repo, using the collab plugin, which then automatically publishes to an Azure site).

People are loving my ArchiMate views in e.g. presentations, rather than Visio diagrams (we all know these don't get updated).

Thank you all, and I'm looking forward to contributing in some way."^^rdf:langString)
AnnotationAssertion(rdfs:comment MyKN:Ordnance_Survey "https://www.ordnancesurvey.co.uk/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Ordnance_Survey)
ObjectPropertyAssertion(MyKN:adopting MyKN:Ordnance_Survey MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Ordnance_Survey "2021-12-20T00:00:00"^^xsd:dateTime)

# Individual: MyKN:PharmaPartners (MyKN:PharmaPartners)

AnnotationAssertion(rdfs:comment MyKN:PharmaPartners "Guido Janssen (2016-06-27):
I am working as a architect at PharmaPartners, a dutch IT company creating software for pharmacies and doctor's. I used Archi for a few years already first just as an architecture diagram drawing tool. Recently I used it to set up an IT landscape model. Since I wanted to share the model with different stakeholder I created a reporting website using XSLT based on the Open Exchange format. I have started to share the more generic parts in a Github project (archimateviewer) especially the views using SVGs. This would actually allows for dynamic views based on properties or as the previous post was washing for replacing the visualisation of certain elements by simply drawing a different kind of node in the view.")
AnnotationAssertion(rdfs:comment MyKN:PharmaPartners "https://www.pharmapartners.nl/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:PharmaPartners)
ObjectPropertyAssertion(MyKN:adopting MyKN:PharmaPartners MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:PharmaPartners "2016-06-27T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Philips_Lighting (MyKN:Philips_Lighting)

AnnotationAssertion(rdfs:comment MyKN:Philips_Lighting "Paul Kraakman (pkraakman) (2016-05-23):
I work as an Enterprise Security Architect in the new company called Philips Lighting founded by Royal Philips.

For creating the Enterprise Security Architecture I am using Archimate as a open standard and well developed language, although an extension to risk and security would be welcome (understand that Open Group is investigating this).

As I wanted to use an architecture tool to manage and share my views and designs I started to use Archi as an alternative to commercial EA tools also hoping for an easy exchange of models with other architecture disciplines. This is still in the early stages as I am working my way throuhg the various domains also sharing and getting feedback from the other domain architects.

Paul Kraakman")
AnnotationAssertion(rdfs:comment MyKN:Philips_Lighting "https://www.lighting.philips.com/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Philips_Lighting)
ObjectPropertyAssertion(MyKN:adopting MyKN:Philips_Lighting MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Philips_Lighting "2016-05-23T00:00:00"^^xsd:dateTime)

# Individual: MyKN:RSPCA (MyKN:RSPCA)

AnnotationAssertion(rdfs:comment MyKN:RSPCA "smileham (2022-06-15):
Let's add the Royal Society for the Prevention of Cruelty to Animals (RSPCA) to the list of organisations using Archi.

I've been supporting Enterprise Architecture at the RSPCA for some time now, using Archi to maintain an Architecture Repository to deliver ArchiMate models/designs for both large scale Enterprise projects/programmes, but also smaller \"Business as Usual\" demand.

We have a small team of three architects (Enterprise, Solution and Data) all using Archi to model our solutions in a shared repository synchronised using coArchi, with a dash of jArchi for automation.

A huge thankyou to the Archi development team!"^^rdf:langString)
AnnotationAssertion(rdfs:comment MyKN:RSPCA "https://www.rspca.org.uk/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:RSPCA)
ObjectPropertyAssertion(MyKN:adopting MyKN:RSPCA MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:RSPCA "2022-06-15T16:25:21"^^xsd:dateTime)

# Individual: MyKN:Sogeti_Nederland_B.V. (MyKN:Sogeti_Nederland_B.V.)

ClassAssertion(MyKN:Institute MyKN:Sogeti_Nederland_B.V.)
ObjectPropertyAssertion(MyKN:adopting MyKN:Sogeti_Nederland_B.V. MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Sogeti_Nederland_B.V. "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Sparx (MyKN:Sparx)

ClassAssertion(MyKN:EA_Tool MyKN:Sparx)

# Individual: MyKN:Standard_Bank_of_South_Africa_Limited (MyKN:Standard_Bank_of_South_Africa_Limited)

ClassAssertion(MyKN:Institute MyKN:Standard_Bank_of_South_Africa_Limited)
ObjectPropertyAssertion(MyKN:adopting MyKN:Standard_Bank_of_South_Africa_Limited MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Standard_Bank_of_South_Africa_Limited "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Stime (MyKN:Stime)

AnnotationAssertion(rdfs:comment MyKN:Stime "Herve (2026-04-15):
Hi,

As far as I'm concerned, I'm a technical architect at Stime, the IT company of the musqueteers group (Intermarche, Bricomarche, Netto, Poivre Rouge, ...).

I replaced Visio by Archi to draw all my architecture diagrams.

I developped an Archi plugin to import all our CIs from our ServiceNow CMDB (https://github.com/archi-contribs/snow-import-plugin).

I am also developping a plugin to store the Archi plugins into a database. The alpha relase will be available on Github soon.

Best regards")
AnnotationAssertion(rdfs:comment MyKN:Stime "https://musketeers.group/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Stime)
ObjectPropertyAssertion(MyKN:adopting MyKN:Stime MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Stime "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:The_TriZetto_Group (MyKN:The_TriZetto_Group)

ClassAssertion(MyKN:Institute MyKN:The_TriZetto_Group)
ObjectPropertyAssertion(MyKN:adopting MyKN:The_TriZetto_Group MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:The_TriZetto_Group "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:United_States_Department_of_Labor (MyKN:United_States_Department_of_Labor)

ClassAssertion(MyKN:Institute MyKN:United_States_Department_of_Labor)
ObjectPropertyAssertion(MyKN:adopting MyKN:United_States_Department_of_Labor MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:United_States_Department_of_Labor "2016-04-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:University_of_St_Gallen_HSG (MyKN:University_of_St_Gallen_HSG)

AnnotationAssertion(rdfs:comment MyKN:University_of_St_Gallen_HSG "Thomas Rischbeck (2023-03-12):
I'm using Archi to teach \"Enterprise Modeling\" for a course at the University of St. Gallen HSG (www.unisg.ch). About 50 Bachelor students in Business Information Systems take this course.

I'm convinced that this skill will be important for future business leaders. Our highly dynamic time needs informed decision-making that takes into account all perspectives and knowledge at all levels. Participation creates shared ownership and emotional buy-in. This makes transformation manageable and achievable. An enterprise model supports dialogue and orientation and furthers organizational learning at all levels.

Archi comes in very handy to acquire practical tooling experience and understand the concept of repository vs. views plus learn some ArchiMate concepts.
ITMC AG • Bahnhofstrasse 10 • CH-8001 Zürich
Dr. Thomas Rischbeck
PhD in Computer Science
Managing Partner   
rischbeck@itmc.ch
www.itmc.ch")
AnnotationAssertion(rdfs:comment MyKN:University_of_St_Gallen_HSG "https://www.unisg.ch/en/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:University_of_St_Gallen_HSG)
ObjectPropertyAssertion(MyKN:adopting MyKN:University_of_St_Gallen_HSG MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:University_of_St_Gallen_HSG "2021-03-12T00:00:00"^^xsd:dateTime)

# Individual: MyKN:University_of_Sydney (MyKN:University_of_Sydney)

AnnotationAssertion(rdfs:comment MyKN:University_of_Sydney "yvain (2016-07-06):
We're using it in an unofficial capacity at the University of Sydney.

What we've liked about Archi is that it enforces the Archimate syntax - which is invaluable when you're first coming up to speed with the language itself. Likewise, the fact that it enforces what are in the standard viewpoints - which again is great for people who are coming up to speed with Archimate.")
AnnotationAssertion(rdfs:comment MyKN:University_of_Sydney "https://www.sydney.edu.au/"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:University_of_Sydney)
ObjectPropertyAssertion(MyKN:adopting MyKN:University_of_Sydney MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:University_of_Sydney "2016-07-06T00:00:00"^^xsd:dateTime)

# Individual: MyKN:VFS (MyKN:VFS)

ClassAssertion(MyKN:Institute MyKN:VFS)
ObjectPropertyAssertion(MyKN:adopting MyKN:VFS MyKN:Archi)
ObjectPropertyAssertion(MyKN:adopting MyKN:VFS MyKN:HOPEX)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:VFS "2021-03-01T00:00:00"^^xsd:dateTime)

# Individual: MyKN:Walraven (MyKN:Walraven)

AnnotationAssertion(rdfs:comment MyKN:Walraven "Marco m@rco (2017-08-15):
Hi,

I use Archi primarily to maintain the Application Landscape and derived models for Walraven (www.walraven.com), a multinational manufacturing company. I also use it to make specific project views on the landscape, depicting changes. It really helps that integrity of relations is kept at all times, to decide in what views to show these or not.

Regards,
Marco")
AnnotationAssertion(rdfs:comment MyKN:Walraven "www.walraven.com"^^xsd:anyURI)
ClassAssertion(MyKN:Institute MyKN:Walraven)
ObjectPropertyAssertion(MyKN:adopting MyKN:Walraven MyKN:Archi)
DataPropertyAssertion(MyKN:dateUseArchi MyKN:Walraven "2017-08-15T00:00:00"^^xsd:dateTime)

# Individual: MyKN:iServer (MyKN:iServer)

ClassAssertion(MyKN:EA_Tool MyKN:iServer)


)